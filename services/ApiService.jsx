import { API_URL } from '../services/config';


// üìå –†–∞–±–æ—Ç–∞ —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏
export const getRooms = async () => {
  try {
    const response = await fetch(`${API_URL}/rooms`);
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç: ${response.status} ${response.statusText}`);
    }
    return await response.json();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–º–Ω–∞—Ç:", error);
    return [];
  }
};

export const testApiConnection = async () => {
  try {
    console.log("–¢–µ—Å—Ç API-–∑–∞–ø—Ä–æ—Å–∞...");
    const response = await fetch("https://kursovaya-ryzhov.ru/api/rooms", { 
      method: "GET",
      headers: { "Content-Type": "application/json" },
    });

    console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response);
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status} ${response.statusText} - ${errorText}`);
    }

    const data = await response.json();
    console.log("–î–∞–Ω–Ω—ã–µ –æ—Ç API:", data);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ API:", error);
  }
};


  

export const createRoom = async (name, theme) => {
  try {
    const response = await fetch(`${API_URL}/rooms`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ name, theme }),
    });
    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
    return null;
  }
};

export const deleteRoom = async (roomId) => {
  try {
    await fetch(`${API_URL}/rooms/${roomId}`, { method: 'DELETE' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
  }
};

// üìå –†–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞—á–∞–º–∏
export const getTasks = async (roomId) => {
  try {
    const response = await fetch(`${API_URL}/tasks?roomId=${roomId}`);
    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', error);
    return [];
  }
};

export const createTask = async (columnId, text) => {
    try {
      const requestBody = { column_id: columnId, text };
      console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ createTask:", requestBody);
  
      const response = await fetch(`${API_URL}/tasks`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestBody),
      });
  
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${response.status} ${response.statusText} - ${errorText}`);
      }
  
      return await response.json();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", error);
      return null;
    }
  };
  

export const deleteTask = async (taskId) => {
  try {
    await fetch(`${API_URL}/tasks/${taskId}`, { method: 'DELETE' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
  }
};

// üìå –†–∞–±–æ—Ç–∞ —Å –∑–∞–ø–∏—Å—è–º–∏
export const getEntries = async (roomId) => {
  try {
    const response = await fetch(`${API_URL}/entries?roomId=${roomId}`);
    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:', error);
    return [];
  }
};

export const createEntry = async (roomId, content) => {
  try {
    const response = await fetch(`${API_URL}/entries`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ room_id: roomId, content }),
    });
    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
    return null;
  }
};

export const deleteEntry = async (entryId) => {
  try {
    await fetch(`${API_URL}/entries/${entryId}`, { method: 'DELETE' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
  }
};

export const createColumn = async (roomId, title) => {
    try {
      const requestBody = { room_id: roomId, title };
      console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ createColumn:", requestBody);
  
      const response = await fetch(`${API_URL}/columns`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestBody),
      });
  
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏: ${response.status} ${response.statusText} - ${errorText}`);
      }
  
      return await response.json();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏:", error);
      return null;
    }
  };
  
  


  export const getColumns = async (roomId) => {
    try {
      const response = await fetch(`${API_URL}/columns?roomId=${roomId}`);
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫: ${response.status} ${response.statusText}`);
      }
      return await response.json();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–ª–æ–Ω–æ–∫:", error);
      return [];
    }
  };
  